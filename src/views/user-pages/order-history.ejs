<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order List</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
        }

        .container-order {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        h1 {
            text-align: center;
            color: #333;
        }

        .order {
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
            background-color: #f9f9f9;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            cursor: pointer;
            background-color: #e9ecef;
            padding: 10px;
            border-radius: 5px;
        }

        .order-number {
            font-weight: bolder;
            font-size: large;
            color: #333;
        }

        .order-status {
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 4px;
        }

        .status-pending {
            background-color: #f0ad4e;
            color: #fff;
        }

        .status-completed {
            background-color: #5cb85c;
            color: #fff;
        }

        .order-details {
            display: none;
            margin-top: 10px;
        }

        .order-details.active {
            display: block;
        }

        .product {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            padding: 10px;
            background-color: #fff;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .product img {
            width: 80px;
            height: auto;
            margin-right: 15px;
            border-radius: 4px;
        }

        .product-info {
            flex-grow: 1;
        }

        .product-actions {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
        }

        .btn-container-order {
            text-align: center;
            margin-top: 20px;
        }

        .btn {
            padding: 10px 20px;
            margin: 5px 0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.3s;
        }

        .btn-cancel {
            background-color: #d9534f;
            color: #fff;
        }

        .btn-cancel:hover {
            background-color: #c9302c;
        }

        .btn-return {
            background-color: #5bc0de;
            color: #fff;
        }

        .btn-return:hover {
            background-color: #31b0d5;
        }

        .btn-shop {
            background-color: #474f57;
            color: #fff;
        }

        .btn-shop:hover {
            background-color: #373e46;
        }

        a {
            color: inherit;
            text-decoration: none;
        }

        .breadcrumb-section {
            padding: 20px 0;
            background-color: #f7f7f7;
            text-align: center;
        }

        .breadcrumb-text {
            display: inline-block;
            text-align: left;
        }

        .breadcrumb-text p {
            margin: 0;
        }
    </style>
</head>

<body>
    <%- include('partials/head/head.ejs') %>
        <%- include('partials/header/header.ejs') %>
            <!-- breadcrumb-section -->
            <div class="breadcrumb-section breadcrumb-bg">
                <div class="container">
                    <div class="row">
                        <div class="col-lg-8 offset-lg-2 text-center">
                            <div class="breadcrumb-text">
                                <p>See more Details</p>
                                <h1>Order List</h1>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- end breadcrumb section -->
            <div class="container-order">
                <h1>Order List</h1>
                <% if (order.length> 0) { %>
                    <% order.forEach((data, orderIndex)=> { %>
                        <div class="order">
                            <div class="order-header" onclick="toggleOrderDetails('<%= orderIndex %>')">
                                <span class="order-number fw-bolder">ORDER ID : <%= data.orderId %></span>
                                <span class="order-status">
                                    <%= data.orderDate %>
                                </span>
                            </div>
                            <div class="order-details" id="order-details-<%= orderIndex %>">
                                <h5 class="order-date">Date: <%= new Date(data.orderDate).toLocaleDateString() %>
                                </h5>
                                <% data.products.forEach((item, index)=> { %>
                                    <input type="hidden" value="<%= item.productId %>"
                                        id="productId_<%= orderIndex %>_<%= index %>">
                                    <input type="hidden" value="<%= item.quantity %>"
                                        id="quantity_<%= orderIndex %>_<%= index %>">
                                    <div class="product">
                                        <img src="/product-images/<%= item.imageUrl %>" class="img-sm img-thumbnail"
                                            alt="<%= item.name %>">
                                        <div class="product-info">
                                            <h4>Product Name: <%= item.name %>
                                            </h4>
                                            <h5>Price: Rs <%= item.originalProductPrice %>
                                            </h5>
                                            <h5>Quantity: <%= item.quantity %>
                                            </h5>
                                            <h5>Status: <%= item.status %>
                                            </h5>
                                            <% if (data.couponDiscount) { %>
                                                <h5>Coupon Applied: <span id="couponDiscount">
                                                        <%= data.couponDiscount %>
                                                    </span> %</h5>
                                                <% } %>
                                        </div>
                                        <div class="product-actions">
                                            <% if (item.status==='DELIVERED' ) { %>
                                                <button class="btn btn-return btn-primary"
                                                    onclick="returnOrder('<%= orderIndex %>', '<%= data.orderId %>', '<%= item.productId %>', '<%= data.couponDiscount %>')">Return
                                                    Order</button>
                                                <% } else if (item.status==='CANCELLED' ) { %>
                                                    <h6 class="text-danger">Product cancelled Successfully</h6>
                                                    <% } else if (item.status==='RETURNED' ) { %>
                                                        <h6 class="text-danger">Product has been returned Successfully
                                                        </h6>
                                                        <% } else if (item.status==='PENDING' ) { %>
                                                            <button class="fw-bold btn btn-danger"
                                                                onclick="retryPaymentFailed('<%= data.orderId %>','<%= data.totalPrice %>')">Retry
                                                                Payment</button>
                                                            <% } else if (item.status==='PENDING APPROVAL' ) { %>
                                                                <h5 class="text-danger">Returned request pending </h5>
                                                                <% } else if (item.status==='APPROVE' ) { %>
                                                                    <h5 class="text-success"> Product return approved</h5>
                                                                    <% } else if (item.status==='REJECT' ) { %>
                                                                        <h5 class="text-danger">Product return rejected</h5>
                                                                <% } else { %>
                                                                    <button class="btn btn-cancel btn-danger"
                                                                        onclick="cancelProduct('<%= orderIndex %>', '<%= data.orderId %>', '<%= item.productId %>')">Cancel
                                                                        Product</button>
                                                                    <% } %>
                                        </div>
                                    </div>
                                    <% }) %>
                                        <h5>Payment Method: <%= data.paymentMethod %>
                                        </h5>
                                        <h4>Total Amount: Rs <%= data.totalPrice %>
                                        </h4>
                                        <% console.log(data.products[0].status, 'products status is showing' ); %>
                                            <% if (data.products[0].status !== 'PENDING' && data.products[0].status !== 'PENDING APPROVAL' && data.products[0].status !== 'APPROVE' ) { %>
                                                <button class="btn-history"><a
                                                        href="/order-invoice?orderId=<%= order[orderIndex].orderId %>">Invoice</a></button>
                                                <% } %>
                            </div>
                        </div>
                        <% }) %>
                            <% } else { %>
                                <h3 class="text-center">No order yet placed</h3>
                                <h4 class="text-center">Go to shopping <a href="/shop">shop</a></h4>
                                <% } %>
            </div>
            <%- include('partials/footer/footer.ejs') %>
                <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

                <script>
                    function toggleOrderDetails(index) {
                        const details = document.getElementById('order-details-' + index);
                        details.classList.toggle('active');
                    }

                    async function cancelProduct(orderIndex, orderId, productId) {
                        const quantity = document.getElementById('quantity_' + orderIndex + '_0').value;
                        console.log(quantity, 'quantity is showing');
                        await fetch(`/cancel-order/?productId=${productId}&quantity=${quantity}&orderId=${orderId}`, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        })
                            .then(response => response.ok ? response.json() : console.log('Network failure'))
                            .then(data => {
                                if (data.result === 'success') {
                                    console.log('Product cancelled successfully');
                                    location.reload();
                                }
                            })
                            .catch(err => console.log('Error:', err));
                    }

                    async function returnOrder(orderIndex, orderId, productId, couponDiscount) {
                        const quantity = document.getElementById('quantity_' + orderIndex + '_0').value;
                        Swal.fire({
                            title: 'Return Order',
                            input: 'textarea',
                            inputLabel: 'Return Reason',
                            inputPlaceholder: 'Type your reason here...',
                            showCancelButton: true,
                            confirmButtonText: 'Submit',
                            preConfirm: (returnReason) => {
                                if (!returnReason) {
                                    Swal.showValidationMessage('Return reason is required');
                                }
                                return returnReason;
                            }
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                const returnReason = result.value;
                                await fetch(`/return-order/?orderId=${orderId}&returnReason=${encodeURIComponent(returnReason)}`, {
                                    method: 'GET',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    }
                                })
                                    .then(response => response.ok ? response.json() : console.log('Network failure'))
                                    .then(data => {
                                        if (data.result === 'success') {
                                            Swal.fire('Success', 'Order returned successfully', 'success').then(() => {
                                                location.reload();
                                            });
                                        }
                                    })
                                    .catch(err => console.log('Error:', err));
                            }
                        });
                    }
                </script>
                <script>
                    async function retryPaymentFailed(orderId, amount) {
                        try {
                            console.log('razorpay is working');
                            const response = await fetch(`/razorpay-payment`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ amount: amount.trim() })
                            });

                            if (!response.ok) {
                                throw new Error('Failed to create order');
                            }
                            console.log(response, 'response is showing ===================');

                            const order = await response.json();
                            console.log(order, 'order is showing');
                            const options = {
                                key: 'rzp_test_e55Dk1oHQbvyBo',
                                amount: order.amount,
                                currency: order.currency,
                                order_id: order.id,
                                name: 'Your Company Name',
                                description: 'Test Payment',
                                image: 'https://via.placeholder.com/150',
                                handler: function (response) {
                                    console.log(response, 'response is showing');
                                    Swal.fire({
                                        title: 'Payment Successful!',
                                        html: `<p>Payment ID: <strong>${response.razorpay_payment_id}</strong></p>
                                       <p>Amount: <strong>${order.amount}</strong> ${order.currency}</p>`,
                                        icon: 'success',
                                        timer: 3500,

                                    }).then(() => {
                                        razorpaySuccess(response.razorpay_payment_id);
                                    });
                                },
                                prefill: {
                                    name: 'John Doe',
                                    email: 'john.doe@example.com',
                                    contact: '1234567890'
                                },
                                theme: {
                                    color: '#528FF0'
                                }
                            };

                            const razorpayInstance = new Razorpay(options);
                            razorpayInstance.on('payment.failed', function (response) {
                                console.log(response.error, 'Payment failed');
                                fetch('/payment-failed-handler', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        amount: amount.trim(),
                                        paymentMethod: 'Online Payment',
                                        address: selectedAddress,
                                        couponDiscount: couponDiscount,
                                        couponCode: couponCode
                                    })
                                })
                                    .then(() => {
                                        window.location.href = '/payment-failed-page';
                                    })
                                    .catch(err => {
                                        console.error('Error handling payment failure:', err);
                                        window.location.href = '/payment-failed-page';
                                    });
                            });

                            razorpayInstance.open();

                            async function razorpaySuccess(paymentId) {
                                console.log('showing');
                                const paymentMethod = 'Online Payment';
                                await fetch(`/order-add-failed-payment/?paymentMethod=${paymentMethod}&orderId=${orderId}`, {
                                    method: 'GET',
                                    headers: { 'Content-Type': 'application/json' }
                                }).then(response => response.ok ? response.json() : console.log('Network error'))
                                    .then((data) => {
                                        if (data.result === 'success')
                                            window.location.href = '/order-placed';
                                    }).catch(err => {
                                        console.log('Error:', err);
                                    });
                            }
                        } catch (error) {
                            console.error('Error:', error);
                            alert('Failed to create order');
                        }
                    }
                </script>
</body>

</html>